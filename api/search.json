[{"id":"6ff5e3b185195f909d29a73577dfb5d7","title":"windows下Docker安装","content":"Docker概述简介1、Docker是一个开源的应用容器引擎，基于Go语言并且遵循Apache 2.0协议开源。 \n2、Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中， 然后发布到任何流行的Linux机器中，也可以实现虚拟化。 \n3、容器是完全使用沙盒机制，相互之间不会有任何接口，更为重要的是容器性能开销极低。\n应用场景1、Web应用的自动化打包和发布； \n2、自动化测试和持续集成、发布； \n3、在服务型环境中部署和调整数据库或其他的后台应用； \n4、从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的Paas环境。 \n优势1、快速，一致地交付应用程序 Docker允许开发人员使用您提供的应用程序或者服务的本地容器在标准化环境中工作，从而简化了 开发的生命周期 利用 Docker 的方法来快速交付，测试和部署代码，可以大大减少编写代码和在生产环境中运行代 码之间的延迟 \n2、响应式部署和扩展 Docker是基于容器的平台，允许高度可移植的工作负载。 Docker容器可以在开发人员的本机上、数据中心的物理或虚拟机上、云服务上或混合环境中运行。 \n3、在同一硬件上运行更多工作负载 Docker轻巧快速 Docker为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此可以利用更多的 计算能力来实现业务目标 Docker非常适合于高密度环境以及中小型部署，可用更少的资源做更多的事情。\n架构Docker三个基础概念\n镜像（image）：Docker镜像相当于一个root文件系统 \n\n容器（Container）：镜像和容器的关系，就像是面向对象程序设计中的类和实例一样，镜像是静 态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 \n\n仓库（repository）：仓库可看成一个代码控制中心，用来保存镜像\n\n\nDocker使用客户端-服务器（C&#x2F;S）架构模式，使用远程API来管理和创建Docker容器 \nDocker容器通过Docker镜像来创建 \n容器与镜像的关系类似于面向对象编程中的对象与类\n总的来说，相对于VM，docker是一个轻量级的小型虚拟机，可以快速生成和修改，方便搭建漏洞环境。\n安装本文为windous系统下安装流程\n硬件要求：\n\n最低i5，推荐i7处理器\n最少4核8G，建议8核16G以上配置\n最好使用SSD硬盘，并有20G以上空余存储空间\n\n操作系统要求：\n\nWindows 10 2004 (Build 19041或者更高版本)\nWindows 11\n\n打开虚拟化打开控制面板&gt;&gt;程序&gt;&gt;程序和功能&gt;&gt;启用或关闭Windows功能&gt;&gt;将图中两项打开\n\n配置wsl2\n从此地址： https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi下载wsl更新包，双击安装，很块就会安装完成。\n\n卸载旧系统\n\n\n如果存在旧的linux系统，可以通过如下命令删除\nwsl --unregister Legacy\n\n\n查看可选linux发行版\n\nwsl --list --online\n\n输出：(彼时版本2023年1月)\n以下是可安装的有效分发的列表。\n请使用“wsl --install -d &lt;分发&gt;”安装。\n\nNAME               FRIENDLY NAME\nUbuntu             Ubuntu\nDebian             Debian GNU&#x2F;Linux\nkali-linux         Kali Linux Rolling\nSLES-12            SUSE Linux Enterprise Server v12\nSLES-15            SUSE Linux Enterprise Server v15\nUbuntu-18.04       Ubuntu 18.04 LTS\nUbuntu-20.04       Ubuntu 20.04 LTS\nUbuntu-22.04       Ubuntu 22.04 LTS\nOracleLinux_8_5    Oracle Linux 8.5\nOracleLinux_7_9    Oracle Linux 7.9\n\n\n安装特定的版本,，建议后2个中选一个\n\nwsl --install -d Ubuntu-22.04\n\n\n可能安装缓慢，可以进入官网：\n\nhttps://docs.microsoft.com/zh-cn/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package \n查看从微软商店下载或者直接下载发行文件。\n安装docker(彼时版本4.16.3)\n进入官网下载https://docs.docker.com/desktop/install/windows-install/\n\n正常安装即可：\n\n拓展内容(可选)docker设置国内镜像\n在设置中添加镜像源\n,\n  &quot;registry-mirrors&quot;: [\n    &quot;https:&#x2F;&#x2F;mirror.baidubce.com&quot;,\n    &quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;,\n    &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,\n    &quot;https:&#x2F;&#x2F;ccr.ccs.tencentyun.com&quot;\n  ]\n\n\n\n随着时间可用镜像源可能改变，建议上网查找。\n\nwsl性能限制Windows的linux子系统（WSL2，进程名称Vmmem）最大占用可到本机器的80%，所以必须限制一下它的性能来达到优化目的\n按下Windows + R 键，输入 %UserProfile% 并运行进入用户文件夹\n新建文件 .wslconfig ，然后记事本编辑（其他软件也行）\nmemory&#x3D;4GB，此配置根据自己电脑配置来设置，配置好设置大一点，配置低设置小一点。\n[wsl2]\n\nmemory&#x3D;4GB\n\nswap&#x3D;8GB\n\nlocalhostForwarding&#x3D;true\n\n以下Docker操作请先到服务里关闭Docker服务在进行docker Desktop从C盘转移到D盘可以使用软连接，先在D盘建立Docker文件夹（也可以自己定）\n找到C:\\Program Files\\Docker 即默认下载地址，将里面的内容拷贝到D盘建立的Docker文件夹中。\n然后在命令提示符执行下边的命令（注意：需要管理员身份运行命令提示符）\nmklink &#x2F;j &quot;C:\\Program Files\\Docker&quot; &quot;D:\\Docker&quot;\n\n出现“当文件已存在时，无法创建该文件。”的问题，需要先把c盘的目录删掉。\n还有在C盘用户下的 .docker 文件夹，和上一步一样，粘贴进D盘建立Docker文件夹中。\n然后删除原目录，执行：\nmklink &#x2F;j &lt;.docker文件在C盘的地址&gt; &quot;D:Docker\\.docker&quot;\n\nWSL里docker的镜像文件从C盘转移到D盘以管理员运行命令行输入wsl --list -v 可以查看到已有的linux发行版。\n\n转移前确保状态都为Stopped，如果有正在运行的，执行wsl --shutdown 终止运行。\n转移有三个步骤，都适用于这三个文件：\n\n首先在要转移的盘创建相应的文件夹，执行命令导出为压缩文件：\nwsl --export Ubuntu-22.04 &quot;D:\\Docker\\wsl\\ubuntu2204\\ubuntu.tar&quot;\n\n执行后对应文件夹下会出现压缩文件\n\n注销原文件：\nwsl --unregister Ubuntu-22.04\n\n执行后wsl --list -v 将没有Ubuntu-22.04显示\n\n重新导入到指定文件夹中：\nwsl --import Ubuntu-22.04 &quot;D:\\Docker\\wsl\\ubuntu2204\\&quot; &quot;D:\\Docker\\wsl\\ubuntu2204\\ubuntu.tar&quot;  --version 2\n\n导入后文件夹中会出现.vhdx文件，在后面运行无误后可以删除开始导出的压缩文件。\n\n\n剩下两个文件步骤相同自行修改：\n\n\n\n\n\n\n\n\n\nwsl –export docker-desktop-data “D:\\Docker\\wsl\\data\\docker-desktop-data.tar”\nwsl –export docker-desktop D:\\Docker\\wsl\\distro\\docker-desktop.tar  \nwsl –unregister docker-desktop-data\nwsl –unregister docker-desktop\nwsl –import docker-desktop-data “D:\\Docker\\wsl\\data&quot;  “D:\\Docker\\wsl\\data\\docker-desktop-data.tar”  –version 2\nwsl –import docker-desktop D:\\Docker\\wsl\\distro\\  D:\\Docker\\wsl\\distro\\docker-desktop.tar –version 2\n注意：Ubuntu在转移后默认用户会修改为root用户，如果需要改回可以进入管理员命令行：\nubuntu2204.exe config --default-user &lt;要改回的用户名&gt;\n\n注意不同系统的修改前面的系统名\n问题WSL2启动时提示：参考的对象类型不支持尝试的操作：解决方法：https://blog.csdn.net/fangye945a/article/details/123832623\n一直显示Docker Desktop starting…老问题，大概率还为WSL的问题，可以使用上一条的第一种方法，也可以试试先下载4.15.0，如果能正常连接，在升级\nUbuntu更改找不到用户等问题window访问wsl可以在文件夹路径中或者win+R输入 \\\\wsl$ 来查看安装的ubuntu系统文件，找不到用户还可以正常创建一个用户。\n","slug":"doctor安装","date":"2023-01-23T07:20:36.000Z","categories_index":"软件","tags_index":"技术","author_index":"rui_yuan"},{"id":"0b39c436b7bdec901d53ed031fa8b266","title":"记一次博客更换的全流程(亦从0六步搭建GitHub个人博客)","content":"前言：​\t\t写博客是记录学习生活反思和复习的有效途径之一，在写博客的过程中再对知识进行复盘整理，以后也能进行方便有效的回顾。在实习面试时一个优良的博客也一定是加分项，当然从宏观上来讲博客有很多种形式，小到CSND、知乎，中间有博客园，在大到租用云端服务器，自己搭建服务器，都是博客的践行方式。2022年，我的上一个博客和域名都是白嫖github学生包中的微软服务器及namecheap域名商的，如今一年之期就要到了，因为国内对于学生邮箱多年的滥用，许多国外厂商的学生优惠单用中国的学生邮箱是很难通过的，在今年github学生包更难申请了。今年的申请有些悬，我遂提前招呼招呼博客的下家，虽然从本质上来说还是在白嫖github…..\n正文：1.安装NodeJS：(彼时版本: node-v18.13.0-x64)\n官网下载地址：https://nodejs.org/\n下载后一路点击next，注意选择安装路径，其他均按照默认即可。\n安装完成后打开cmd窗口，输入命令node -v 查看node版本、在安装node的同时也安装了npm，执行 npm -v 查看npm版本：\n\n\n​\t正常显示代表安装完成。\n修改全局包路径（非必要）\n下载全局包时，默认保存在C盘下，可通过 npm root -g 命令查看当前路径，但是我们有时候想把全局包放在其他目录下，以免占用C盘空间。\n\n在安装目录下创建两个文件夹，node_global 全局包存放，node_cache node缓存\n\n\n在cmd命令行中执行如下两条命令： (注意替换安装文件路径)\nnpm config set prefix &quot;D:\\server\\NodeJS\\node_global&quot;\nnpm config set cache &quot;D:\\server\\NodeJS\\node_cache&quot;\n\n上面步骤里更改了npm全局模块的存放路径和cache路径，但是系统还不知道，所以需要修改环境变量。\n\n\n​\t打开PATH环境变量：“此电脑&gt;右键&gt;属性&gt;&gt;高级系统设置&gt;&gt;环境变量-用户变量PATH” 添加 node_global 的路径（替换安装文件路径）\n\n​\t在下方系统变量中添加NODE_PATH (注意前半段替换安装文件路径)\n\n测试安装\n更换下载源（如果下载速度慢或者无法下载可选）\n\n​\t输入命令更换淘宝npm镜像源： npm config set registry https://registry.npm.taobao.org\n​\t输入命令检查：npm config get registry\n\n测试配置：\n\n​\t我们安装一个模块测试。以管理员身份运行cmd，输入命令：\nnpm install -g  vue    \n\n​\t能正常安装说明运行成功，对应文件下也会出现对应包：\n\nNodeJS安装完成2.安装Git:  (彼时版本: Git-2.39.0.2-64-bit)\n官网下载页面：https://git-scm.com/downloads\n\n选择安装路径\n\n\n\n\n\n按照默认一路next即可，大致每步意思可以参考这篇文章\n\n安装后也可以命令 git -v查看安装。\n\n\n正常显示代表Gti安装完成3.创建GitHub网站域名\n首先一个GitHub账号是必要的，没注册可以自行注册。GitHub注册账号 （注意不花钱租域名的情况下域名原始为https://&lt;用户名&gt;.github.io/ ，用户名不要太随意了）\n\n进入GitHub，头像&gt;&gt;Your repositories，进入仓库页面。\n\n点击绿色NEW 新建仓库。\n\n注意仓库名格式必须为：&lt;用户名&gt;.github.io，这里其实就可以先插入一个html文档了，或者勾选上ADD a README file  ,点击Create repository 建库。\n\n这里就可以访问https://&lt;用户名&gt;.github.io/ 查看简陋的网站了。\n\n\n4.连接GitHub与本地计算机\n“开始”或“右键”打开 Git Bash命令行，输入如下命令：\n\ngit config --global user.name &quot;你的GitHub用户名&quot;\ngit config --global user.email &quot;你的GitHub注册邮箱&quot;\n\n正常运行不会报错\t\n注意：GitHub有功能可以隐藏真实邮箱而采用它生成的虚拟邮箱用于Git操作，可以在settings&gt;&gt;Emails找到。\n\n然后生成密钥SSH key：\n\nssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;\n\n​\t然后三个回车即可，默认不需要设置密码\n\n然后继续输入cat ~/.ssh/id_rsa.pub查看刚刚生成的私钥，会出现一大段代码。\n在GitHub打开”头像”&gt;&gt;setting ，点击SSH and GPG keys，新建一个SSH，名字随便。将上一步出现的一大段私钥代码复制到 key 内，然后点击Add SSH key 设置公钥。\n检查连接是否成功——在Git Bash命令行中输入 ssh -T git@github.com 如下图内有你的用户名则说明连接成功。\n\n\n\n​\t这里设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。\n5.安装Hexo (我的博客都是基于Hexo框架，对于静态blog它很方便)\n这里需要在电脑里方便的地方创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都将在这个文件夹中。\n\n进入文件夹，在此文件中打开命令行终端或Git命令行输入npm install -g hexo-cli安装Hexo。\n\n\n​\t安装失败可以用管理员身份运行：右键命令提示符&gt;&gt;打开终端，先用如e:切换盘，在用如cd E:\\blog命令切换文件路径\n\n接下来仍然在blog文件夹下输入命令 hexo init blog进行博客的初始化。\n\n​\t这时在文件夹内就会出现对应的博客框架，这些文件构成了整个博客的配置：\n\n\n接下来操作cd命令进入到上图的博客目录下，按顺序输入三条命令：\n\n\n\n\n\n\n\n\n\n\nhexo new test\n\nhexo g\n\nhexo s\n​\t最后出现Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n\n于是我们访问 http://localhost:4000/ 相当于网站在本地打开，会出现hexo的默认主题landscape和刚刚创建的text文章\n\n\n\n\n在这里可以看到博客大体框架已经出现了，你可以对博客进行进一步设置在进行推送，也可以先推送在设置。\n\n6.推送博客\n将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml\n\n\n\n最下面一行找到 # Deployment 栏，如下填入之前在GitHub上创建仓库的完整路径：\n\ntype: git\nrepo: https:&#x2F;&#x2F;github.com&#x2F;&lt;用户名&gt;&#x2F;&lt;用户名&gt;.github.io\nbranch: main\n\n​\t保存配置文件\n\n在当前博客根目录下打开再次命令行，输入npm install hexo-deployer-git --save 安装Git部署插件\n\n在按顺序输入三条命令：\n\nhexo clean\n\nhexo g\n\nhexo s\n\n\n​\t中途可能会出现Github认证的情况，正常认证即可：\n\n\n\n无误后就可以访问https://&lt;用户名&gt;.github.io/查看网站了。\n\n后记​\t到这里一个基于Hexo+GitHub pages的博客就基本创建完成了，hexo有着丰富和多样的主题，支持对网站进行大限度的自定义，可以根据个人喜好切换想要的主题。在进行操作的过程中，出现问题是很正常的，包括我在边做边写这篇博客时也出现过问题。在我看来自学本身就是一个：发现&#x2F;出现问题&gt;&gt;查找答案&gt;直到&gt;解决问题 的过程，在或查找资料或询问别人中拓宽自己的知识面，学到新的知识。\nHexo官方文档 包含了所有配置及命令，是自定义网站必须要看的。\n","slug":"blog","date":"2023-01-18T05:49:36.000Z","categories_index":"生活","tags_index":"blog","author_index":"rui_yuan"},{"id":"91cab77c54412396887e1e687a7b82ec","title":"markdown text","content":"一级标题二级标题三级标题四级标题五级标题六级标题123456\n\n/post/hello-world.html\n\n测试文章链接\n\n&#x2F;&#x2F;上一条无法内部引用，且切换图片显示异常\nhexo 引用文章\n斜体文本\n斜体文本\n粗体文本\n粗体文本\n粗斜体文本\n粗斜体文本\n\n无序列表 1\n\n\n无序列表 2\n\n\n无序列表 3\n\n\n有序列表 1\n有序列表 2\n有序列表 34\n\n\n\n\n\n\n\n\n\n\n这是一个引用：\n\n欢迎\n\n【123\n\n\n\n【\n或者\n\n\n\n这是要被删除的内容。\n这行文字已被添加下划线\n| 姓名   \t| 年龄 |      工作\t || :—– \t| :–: | ——-:\t || 小可爱 \t|  18  | 吃可爱多 \t || 小小勇敢 \t|  20  | 爬棵勇敢树 \t || 小小小机智 |  22  | 看一本机智书 |\n&#x2F;&#x2F;上一条表格没有显示\nUse the printf() function.\n橙色居右橙色居中\n我是黑体字我是微软雅黑我是华文彩云color&#x3D;#0099ff size&#x3D;72 face&#x3D;”黑体”color&#x3D;#00ffffcolor&#x3D;gray\n**转义特殊符号正常显示**\n无转义特殊符号无法正常显示\n这是一句话^1\n&#x2F;&#x2F;上一条脚注没有正常显示\n","slug":"测试文件","date":"2023-01-17T10:49:36.000Z","categories_index":"生活","tags_index":"text","author_index":"rui_yuan"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-01-16T13:34:33.492Z","categories_index":"","tags_index":"","author_index":"rui_yuan"}]